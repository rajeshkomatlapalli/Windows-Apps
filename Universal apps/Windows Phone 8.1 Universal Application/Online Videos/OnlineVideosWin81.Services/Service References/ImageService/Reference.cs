//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 12.0.21005.1
// 
namespace OnlineVideosWin81.Services.ImageService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="savingImgBytes", Namespace="http://schemas.datacontract.org/2004/07/ImageService")]
    public partial class savingImgBytes : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string _PeopleimgNameField;
        
        private string _PersonidField;
        
        private byte[] _imgBytesField;
        
        private string _imgNameField;
        
        private byte[] _imgPovitBytesField;
        
        private byte[] _peopleimgBytesField;
        
        private byte[] _peopleimgPanorBytesField;
        
        private string _povitimgNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _PeopleimgName {
            get {
                return this._PeopleimgNameField;
            }
            set {
                if ((object.ReferenceEquals(this._PeopleimgNameField, value) != true)) {
                    this._PeopleimgNameField = value;
                    this.RaisePropertyChanged("_PeopleimgName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _Personid {
            get {
                return this._PersonidField;
            }
            set {
                if ((object.ReferenceEquals(this._PersonidField, value) != true)) {
                    this._PersonidField = value;
                    this.RaisePropertyChanged("_Personid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] _imgBytes {
            get {
                return this._imgBytesField;
            }
            set {
                if ((object.ReferenceEquals(this._imgBytesField, value) != true)) {
                    this._imgBytesField = value;
                    this.RaisePropertyChanged("_imgBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _imgName {
            get {
                return this._imgNameField;
            }
            set {
                if ((object.ReferenceEquals(this._imgNameField, value) != true)) {
                    this._imgNameField = value;
                    this.RaisePropertyChanged("_imgName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] _imgPovitBytes {
            get {
                return this._imgPovitBytesField;
            }
            set {
                if ((object.ReferenceEquals(this._imgPovitBytesField, value) != true)) {
                    this._imgPovitBytesField = value;
                    this.RaisePropertyChanged("_imgPovitBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] _peopleimgBytes {
            get {
                return this._peopleimgBytesField;
            }
            set {
                if ((object.ReferenceEquals(this._peopleimgBytesField, value) != true)) {
                    this._peopleimgBytesField = value;
                    this.RaisePropertyChanged("_peopleimgBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] _peopleimgPanorBytes {
            get {
                return this._peopleimgPanorBytesField;
            }
            set {
                if ((object.ReferenceEquals(this._peopleimgPanorBytesField, value) != true)) {
                    this._peopleimgPanorBytesField = value;
                    this.RaisePropertyChanged("_peopleimgPanorBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _povitimgName {
            get {
                return this._povitimgNameField;
            }
            set {
                if ((object.ReferenceEquals(this._povitimgNameField, value) != true)) {
                    this._povitimgNameField = value;
                    this.RaisePropertyChanged("_povitimgName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ImageService.IImageService")]
    public interface IImageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/SendImageBytesToApp", ReplyAction="http://tempuri.org/IImageService/SendImageBytesToAppResponse")]
        System.Threading.Tasks.Task<OnlineVideosWin81.Services.ImageService.savingImgBytes> SendImageBytesToAppAsync(string ApplicationName, string ImageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/SendPovitImageBytesToApp", ReplyAction="http://tempuri.org/IImageService/SendPovitImageBytesToAppResponse")]
        System.Threading.Tasks.Task<OnlineVideosWin81.Services.ImageService.savingImgBytes> SendPovitImageBytesToAppAsync(string ApplicationName, string ImagePovitName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/SendPeopleImageBytesToApp", ReplyAction="http://tempuri.org/IImageService/SendPeopleImageBytesToAppResponse")]
        System.Threading.Tasks.Task<OnlineVideosWin81.Services.ImageService.savingImgBytes> SendPeopleImageBytesToAppAsync(string ApplicationName, string ImageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/SendPeoplePanorImageBytesToApp", ReplyAction="http://tempuri.org/IImageService/SendPeoplePanorImageBytesToAppResponse")]
        System.Threading.Tasks.Task<OnlineVideosWin81.Services.ImageService.savingImgBytes> SendPeoplePanorImageBytesToAppAsync(string ApplicationName, string ImageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetGalleryImages", ReplyAction="http://tempuri.org/IImageService/GetGalleryImagesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OnlineVideosWin81.Services.ImageService.savingImgBytes>> GetGalleryImagesAsync(string ApplicationName, string PersonId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImageServiceChannel : OnlineVideosWin81.Services.ImageService.IImageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageServiceClient : System.ServiceModel.ClientBase<OnlineVideosWin81.Services.ImageService.IImageService>, OnlineVideosWin81.Services.ImageService.IImageService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ImageServiceClient() : 
                base(ImageServiceClient.GetDefaultBinding(), ImageServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.CustomBinding_IImageService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ImageServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ImageServiceClient.GetBindingForEndpoint(endpointConfiguration), ImageServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ImageServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ImageServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ImageServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ImageServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ImageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<OnlineVideosWin81.Services.ImageService.savingImgBytes> SendImageBytesToAppAsync(string ApplicationName, string ImageName) {
            return base.Channel.SendImageBytesToAppAsync(ApplicationName, ImageName);
        }
        
        public System.Threading.Tasks.Task<OnlineVideosWin81.Services.ImageService.savingImgBytes> SendPovitImageBytesToAppAsync(string ApplicationName, string ImagePovitName) {
            return base.Channel.SendPovitImageBytesToAppAsync(ApplicationName, ImagePovitName);
        }
        
        public System.Threading.Tasks.Task<OnlineVideosWin81.Services.ImageService.savingImgBytes> SendPeopleImageBytesToAppAsync(string ApplicationName, string ImageName) {
            return base.Channel.SendPeopleImageBytesToAppAsync(ApplicationName, ImageName);
        }
        
        public System.Threading.Tasks.Task<OnlineVideosWin81.Services.ImageService.savingImgBytes> SendPeoplePanorImageBytesToAppAsync(string ApplicationName, string ImageName) {
            return base.Channel.SendPeoplePanorImageBytesToAppAsync(ApplicationName, ImageName);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OnlineVideosWin81.Services.ImageService.savingImgBytes>> GetGalleryImagesAsync(string ApplicationName, string PersonId) {
            return base.Channel.GetGalleryImagesAsync(ApplicationName, PersonId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.CustomBinding_IImageService)) {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.CustomBinding_IImageService)) {
                return new System.ServiceModel.EndpointAddress("http://imageservice.lartsoft.com/ImageService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ImageServiceClient.GetBindingForEndpoint(EndpointConfiguration.CustomBinding_IImageService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ImageServiceClient.GetEndpointAddress(EndpointConfiguration.CustomBinding_IImageService);
        }
        
        public enum EndpointConfiguration {
            
            CustomBinding_IImageService,
        }
    }
}
