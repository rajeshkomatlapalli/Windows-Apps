//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 12.0.21005.1
// 
namespace OnlineVideosWin81.Services.FileStoreService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileStoreService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveFiletoCloud", ReplyAction="http://tempuri.org/IService1/SaveFiletoCloudResponse")]
        System.Threading.Tasks.Task SaveFiletoCloudAsync(string ApplicationName, string UserId, string FolderToSave, byte[] myStream, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendFiletoPhone", ReplyAction="http://tempuri.org/IService1/SendFiletoPhoneResponse")]
        System.Threading.Tasks.Task<byte[]> SendFiletoPhoneAsync(string ApplicationName, string UserId, string FolderToSave, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendMail", ReplyAction="http://tempuri.org/IService1/SendMailResponse")]
        System.Threading.Tasks.Task<bool> SendMailAsync(string from, string To, string Subject, string Body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Subscribe", ReplyAction="http://tempuri.org/IService1/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(System.Guid _uniqueID, string uri, string liveId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendToastNotification", ReplyAction="http://tempuri.org/IService1/SendToastNotificationResponse")]
        System.Threading.Tasks.Task SendToastNotificationAsync(string title, string message, string liveId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendRawNotification", ReplyAction="http://tempuri.org/IService1/SendRawNotificationResponse")]
        System.Threading.Tasks.Task SendRawNotificationAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFile", ReplyAction="http://tempuri.org/IService1/DeleteFileResponse")]
        System.Threading.Tasks.Task DeleteFileAsync(string ApplicationName, string UserId, string FolderName, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserFileNames", ReplyAction="http://tempuri.org/IService1/GetUserFileNamesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetUserFileNamesAsync(string ApplicationName, string UserId, string FolderToSave);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RestoreUserData", ReplyAction="http://tempuri.org/IService1/RestoreUserDataResponse")]
        System.Threading.Tasks.Task<OnlineVideosWin81.Services.FileStoreService.RestoreUserDataResponse> RestoreUserDataAsync(OnlineVideosWin81.Services.FileStoreService.RestoreUserDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AppendtoCloud", ReplyAction="http://tempuri.org/IService1/AppendtoCloudResponse")]
        System.Threading.Tasks.Task AppendtoCloudAsync(string ApplicationName, string UserId, string FolderToSave, byte[] myStream, string filename, int Id, int filecount, int fileno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAppCount", ReplyAction="http://tempuri.org/IService1/GetAppCountResponse")]
        System.Threading.Tasks.Task<string> GetAppCountAsync(byte[] PhoneId, string AplicationId, System.DateTime AccessDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveAppCount", ReplyAction="http://tempuri.org/IService1/SaveAppCountResponse")]
        System.Threading.Tasks.Task SaveAppCountAsync(string AppCounte);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RestoreUserData", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RestoreUserDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string ApplicationName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string UserId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string FolderToSave;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string filename;
        
        public RestoreUserDataRequest() {
        }
        
        public RestoreUserDataRequest(string ApplicationName, string UserId, string FolderToSave, string filename) {
            this.ApplicationName = ApplicationName;
            this.UserId = UserId;
            this.FolderToSave = FolderToSave;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RestoreUserDataResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RestoreUserDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] RestoreUserDataResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string restorefilename;
        
        public RestoreUserDataResponse() {
        }
        
        public RestoreUserDataResponse(byte[] RestoreUserDataResult, string restorefilename) {
            this.RestoreUserDataResult = RestoreUserDataResult;
            this.restorefilename = restorefilename;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : OnlineVideosWin81.Services.FileStoreService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<OnlineVideosWin81.Services.FileStoreService.IService1>, OnlineVideosWin81.Services.FileStoreService.IService1 {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.CustomBinding_IService1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task SaveFiletoCloudAsync(string ApplicationName, string UserId, string FolderToSave, byte[] myStream, string filename) {
            return base.Channel.SaveFiletoCloudAsync(ApplicationName, UserId, FolderToSave, myStream, filename);
        }
        
        public System.Threading.Tasks.Task<byte[]> SendFiletoPhoneAsync(string ApplicationName, string UserId, string FolderToSave, string filename) {
            return base.Channel.SendFiletoPhoneAsync(ApplicationName, UserId, FolderToSave, filename);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailAsync(string from, string To, string Subject, string Body) {
            return base.Channel.SendMailAsync(from, To, Subject, Body);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(System.Guid _uniqueID, string uri, string liveId) {
            return base.Channel.SubscribeAsync(_uniqueID, uri, liveId);
        }
        
        public System.Threading.Tasks.Task SendToastNotificationAsync(string title, string message, string liveId) {
            return base.Channel.SendToastNotificationAsync(title, message, liveId);
        }
        
        public System.Threading.Tasks.Task SendRawNotificationAsync(string message) {
            return base.Channel.SendRawNotificationAsync(message);
        }
        
        public System.Threading.Tasks.Task DeleteFileAsync(string ApplicationName, string UserId, string FolderName, string filename) {
            return base.Channel.DeleteFileAsync(ApplicationName, UserId, FolderName, filename);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetUserFileNamesAsync(string ApplicationName, string UserId, string FolderToSave) {
            return base.Channel.GetUserFileNamesAsync(ApplicationName, UserId, FolderToSave);
        }
        
        public System.Threading.Tasks.Task<OnlineVideosWin81.Services.FileStoreService.RestoreUserDataResponse> RestoreUserDataAsync(OnlineVideosWin81.Services.FileStoreService.RestoreUserDataRequest request) {
            return base.Channel.RestoreUserDataAsync(request);
        }
        
        public System.Threading.Tasks.Task AppendtoCloudAsync(string ApplicationName, string UserId, string FolderToSave, byte[] myStream, string filename, int Id, int filecount, int fileno) {
            return base.Channel.AppendtoCloudAsync(ApplicationName, UserId, FolderToSave, myStream, filename, Id, filecount, fileno);
        }
        
        public System.Threading.Tasks.Task<string> GetAppCountAsync(byte[] PhoneId, string AplicationId, System.DateTime AccessDate) {
            return base.Channel.GetAppCountAsync(PhoneId, AplicationId, AccessDate);
        }
        
        public System.Threading.Tasks.Task SaveAppCountAsync(string AppCounte) {
            return base.Channel.SaveAppCountAsync(AppCounte);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.CustomBinding_IService1)) {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.CustomBinding_IService1)) {
                return new System.ServiceModel.EndpointAddress("http://filestoreservice.lartsoft.com/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.CustomBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.CustomBinding_IService1);
        }
        
        public enum EndpointConfiguration {
            
            CustomBinding_IService1,
        }
    }
}
